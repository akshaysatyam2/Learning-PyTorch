import torch
import numpy as np

# If we provide 1 value say 3, it will give output of 1D tensor with 3 values in it
# If we provide 2 values 2, 3 then output will be an 2D array of 2 row and 3 columns
# If we provide 3 values 2, 3, 4 then output will be an 3D array of 2 row, 3 columns and 4 sub columns and so on

# here we are creating random Values, whatever vale we put in torch.rand(a) in place of "a", torch will create that many random values as give it as output in tensor ex: tensor([0.7555, 0.7235, 0.7186])
def creatingRandomValues(*args):
    return torch.rand(*args)

#Working with tensors, value of a represent how many values in each dimension we want
def workingWithTensor(*args):
    return torch.empty(*args) 

def otherUses(*args):
    print(f"\nAll zeros: {torch.zeros(*args)}\n")
    print(f"\nAll ones: {torch.ones(*args)}\n")
    print(f"\nAll ones with specific datatypes: {torch.ones(*args, dtype=torch.int)}\n")
    print(f"\nAll ones with specific datatypes: {torch.ones(*args, dtype=torch.double)}\n")
    print(f"\nAll ones with specific datatypes: {torch.ones(*args, dtype=torch.float16)}\n")
    print(f"\nTensors from list : {torch.tensor([*args])}\n")
    x, y = torch.rand(3,2), torch.rand(3,2)
    numpy_x = x.numpy()
    tensor_x = torch.from_numpy(numpy_x)
    print(f"\n coverting numpy to tensor and vice versa: {numpy_x.dtype, tensor_x.dtype} \n")





if __name__ == "__main__":
    #get random values
    a = 5
    print(f"Random Values {a} generated by torch is: {creatingRandomValues(a)}\n")

    # Creating tensors
    print(f"\nTensors of input{a, 2} is: {workingWithTensor(a, 2)}\n")

    # Other functions
    otherUses(a, 2)